import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// ADD GET handler to restore browser URL functionality
export async function GET(request: NextRequest) {
  return POST(request);
}

export async function POST(request: NextRequest) {
  try {
    console.log('Starting enhanced seed data creation...');

    // Create Pacific School - 20 students (READY status)
    const pacificSchool = await prisma.school.create({
      data: {
        schoolName: "Pacific Elementary",
        teacherName: "Sarah Johnson",
        teacherEmail: "sarah.johnson@pacific.edu",
        teacherPhone: "(415) 555-0101",
        schoolAddress: "123 Ocean View Drive",
        schoolCity: "San Francisco",
        schoolState: "CA",
        schoolZip: "94102",
        gradeLevel: "3,4,5",
        expectedClassSize: 20,
        startMonth: "September",
        specialConsiderations: "We have several students learning English as a second language",
        status: "READY",
        region: "Pacific",
        isActive: true
        // dashboardToken will be auto-generated by @default(cuid())
      }
    });

    // Create Northeast School - 23 students (READY status)
    const northeastSchool = await prisma.school.create({
      data: {
        schoolName: "Northeast Academy",
        teacherName: "Michael Chen",
        teacherEmail: "michael.chen@northeast.edu",
        teacherPhone: "(617) 555-0202",
        schoolAddress: "456 Maple Street",
        schoolCity: "Boston",
        schoolState: "MA",
        schoolZip: "02101",
        gradeLevel: "3,4,5",
        expectedClassSize: 23,
        startMonth: "October",
        specialConsiderations: "Students are very excited about cross-country pen pal connections",
        status: "READY",
        region: "Northeast",
        isActive: true
        // dashboardToken will be auto-generated by @default(cuid())
      }
    });

    // Create Southwest School - 30 students (COLLECTING status for testing)
    const southwestSchool = await prisma.school.create({
      data: {
        schoolName: "Desert View Elementary",
        teacherName: "Maria Rodriguez",
        teacherEmail: "maria.rodriguez@desertview.edu",
        teacherPhone: "(602) 555-0303",
        schoolAddress: "789 Cactus Trail",
        schoolCity: "Phoenix",
        schoolState: "AZ",
        schoolZip: "85001",
        gradeLevel: "4,5",
        expectedClassSize: 30,
        startMonth: "September",
        specialConsiderations: "Mixed bilingual classroom with advanced writing focus",
        status: "COLLECTING",
        region: "Southwest",
        isActive: true
        // dashboardToken will be auto-generated by @default(cuid())
      }
    });

    // Create Midwest School - 23 students (COLLECTING status for testing)
    const midwestSchool = await prisma.school.create({
      data: {
        schoolName: "Prairie View Middle School",
        teacherName: "Jennifer Williams",
        teacherEmail: "jennifer.williams@prairieview.edu",
        teacherPhone: "(312) 555-0404",
        schoolAddress: "321 Cornfield Avenue",
        schoolCity: "Chicago",
        schoolState: "IL",
        schoolZip: "60601",
        gradeLevel: "3,4",
        expectedClassSize: 23,
        startMonth: "October",
        specialConsiderations: "Urban classroom with focus on cultural exchange",
        status: "COLLECTING",
        region: "Midwest",
        isActive: true
        // dashboardToken will be auto-generated by @default(cuid())
      }
    });

    // Create Southeast School - 20 students (COLLECTING status for testing)
    const southeastSchool = await prisma.school.create({
      data: {
        schoolName: "Magnolia Elementary",
        teacherName: "Robert Davis",
        teacherEmail: "robert.davis@magnolia.edu",
        teacherPhone: "(404) 555-0505",
        schoolAddress: "567 Peachtree Lane",
        schoolCity: "Atlanta",
        schoolState: "GA",
        schoolZip: "30301",
        gradeLevel: "3,4,5",
        expectedClassSize: 20,
        startMonth: "September",
        specialConsiderations: "Strong emphasis on creative writing and storytelling",
        status: "COLLECTING",
        region: "Southeast",
        isActive: true
        // dashboardToken will be auto-generated by @default(cuid())
      }
    });

    console.log('Schools created with dashboard tokens, creating students...');

    // Enhanced interest combinations and otherInterests examples
    const interestOptions = ["reading", "art", "sports", "science", "music", "animals", "technology", "games", "nature", "hiking", "cooking", "family", "dance", "outdoor", "crafts", "history", "writing", "experiments", "pets"];
    
    const otherInterestsOptions = [
      "Taylor Swift, Harry Potter",
      "Minecraft, Roblox", 
      "Percy Jackson books",
      "Pokemon, anime",
      "TikTok dances",
      "Baking cookies",
      "Soccer, football",
      "Drawing comics",
      "Playing guitar",
      "Skateboarding",
      null, null, null // 30% have otherInterests, 70% don't
    ];

    const gradeOptions = ["3", "4", "5"];
    const firstNames = ["Emma", "Liam", "Sophia", "Noah", "Ava", "Mason", "Isabella", "Ethan", "Mia", "Alexander", "Charlotte", "William", "Grace", "James", "Lily", "Owen", "Zoe", "Caleb", "Olivia", "Lucas", "Amelia", "Benjamin", "Harper", "Henry", "Evelyn", "Sebastian", "Abigail", "Jackson", "Emily", "Logan", "Aria", "Carter", "Chloe", "Wyatt", "Layla", "Luke", "Riley", "Jack", "Zoey", "Daniel"];
    
    // Updated to generate last initials instead of full last names
    const lastInitials = ["W", "R", "K", "C", "T", "D", "G", "B", "J", "L", "M", "Ta", "P", "Mi", "Co", "Tu", "A", "Mo", "An", "Wh", "H", "Cl", "Le", "Wa", "Ha", "Y", "Ki", "Wr", "Lo", "Hi", "Gr", "Ba", "N", "Ca", "Ro", "Ph", "E", "Tur", "Pa", "Col"];

    // Helper function to generate realistic student data with privacy schema
    const generateStudent = (schoolId: string, index: number) => {
      const firstName = firstNames[index % firstNames.length];
      const lastInitial = lastInitials[Math.floor(Math.random() * lastInitials.length)];
      const grade = gradeOptions[Math.floor(Math.random() * gradeOptions.length)];
      
      // Generate 1-3 interests
      const numInterests = Math.floor(Math.random() * 3) + 1;
      const shuffledInterests = [...interestOptions].sort(() => 0.5 - Math.random());
      const interests = shuffledInterests.slice(0, numInterests);
      
      // 25% MULTIPLE preference, 75% ONE preference (realistic distribution)
      const penpalPreference = Math.random() < 0.25 ? "MULTIPLE" : "ONE";
      
      // 30% chance of having otherInterests
      const otherInterests = otherInterestsOptions[Math.floor(Math.random() * otherInterestsOptions.length)];
      
      // Updated to use new privacy schema - removed parent contact fields
      return {
        firstName,
        lastInitial,  // Changed from lastName
        grade,
        interests,
        otherInterests,
        // Removed parentName, parentEmail, parentPhone for privacy
        parentConsent: true,  // Keep only consent field
        penpalPreference: penpalPreference as "ONE" | "MULTIPLE",
        isActive: true,
        profileCompleted: true,
        schoolId
      };
    };

    // Create Pacific students (20 students)
    console.log('Creating Pacific Elementary students...');
    for (let i = 0; i < 20; i++) {
      const studentData = generateStudent(pacificSchool.id, i);
      await prisma.student.create({ data: studentData });
    }

    // Create Northeast students (23 students)
    console.log('Creating Northeast Academy students...');
    for (let i = 0; i < 23; i++) {
      const studentData = generateStudent(northeastSchool.id, i + 20);
      await prisma.student.create({ data: studentData });
    }

    // Create Southwest students (30 students - mix of complete/incomplete for testing)
    console.log('Creating Desert View Elementary students...');
    for (let i = 0; i < 30; i++) {
      const studentData = generateStudent(southwestSchool.id, i + 43);
      
      // Create variety in completion status for testing:
      // 20 students complete, 10 students incomplete (missing various fields)
      if (i >= 20) {
        // Make some students incomplete for testing purposes
        if (i % 3 === 0) {
          studentData.profileCompleted = false;
          studentData.interests = []; // Missing interests
        } else if (i % 3 === 1) {
          studentData.profileCompleted = false;
          studentData.penpalPreference = "ONE"; // Missing parent consent
          studentData.parentConsent = false;
        } else {
          studentData.profileCompleted = false;
          studentData.grade = ""; // Missing grade
        }
      }
      
      await prisma.student.create({ data: studentData });
    }

    // Create Midwest students (23 students - mix of complete/incomplete for testing)
    console.log('Creating Prairie View Middle School students...');
    for (let i = 0; i < 23; i++) {
      const studentData = generateStudent(midwestSchool.id, i + 73);
      
      // Create variety in completion status for testing:
      // 15 students complete, 8 students incomplete
      if (i >= 15) {
        studentData.profileCompleted = false;
        if (i % 2 === 0) {
          studentData.interests = []; // Missing interests
        } else {
          studentData.parentConsent = false; // Missing parent consent
        }
      }
      
      await prisma.student.create({ data: studentData });
    }

    // Create Southeast students (20 students - mix of complete/incomplete for testing)
    console.log('Creating Magnolia Elementary students...');
    for (let i = 0; i < 20; i++) {
      const studentData = generateStudent(southeastSchool.id, i + 96);
      
      // Create variety in completion status for testing:
      // 12 students complete, 8 students incomplete
      if (i >= 12) {
        studentData.profileCompleted = false;
        if (i % 2 === 0) {
          studentData.grade = ""; // Missing grade
        } else {
          studentData.interests = []; // Missing interests
          studentData.parentConsent = false; // Missing multiple fields
        }
      }
      
      await prisma.student.create({ data: studentData });
    }

    const totalStudents = 20 + 23 + 30 + 23 + 20;
    
    console.log('Enhanced seed data creation completed successfully');
    console.log(`Created ${totalStudents} students across 5 schools with dashboard tokens`);

    // Get the created schools with their tokens for the response
    const createdSchools = await prisma.school.findMany({
      where: {
        teacherEmail: {
          in: [
            "sarah.johnson@pacific.edu",
            "michael.chen@northeast.edu", 
            "maria.rodriguez@desertview.edu",
            "jennifer.williams@prairieview.edu",
            "robert.davis@magnolia.edu"
          ]
        }
      },
      select: {
        schoolName: true,
        teacherEmail: true,
        dashboardToken: true,
        status: true
      }
    });

    return NextResponse.json({
      message: 'Enhanced test data created successfully with privacy protection and dashboard tokens',
      schools: 5,
      schoolDetails: {
        pacificElementary: { students: 20, status: "READY" },
        northeastAcademy: { students: 23, status: "READY" },
        desertViewElementary: { students: 30, status: "COLLECTING", incomplete: 10 },
        prairieViewMiddle: { students: 23, status: "COLLECTING", incomplete: 8 },
        magnoliaElementary: { students: 20, status: "COLLECTING", incomplete: 8 }
      },
      totalStudents,
      dashboardTokens: createdSchools.map(school => ({
        schoolName: school.schoolName,
        teacherEmail: school.teacherEmail,
        dashboardToken: school.dashboardToken,
        dashboardUrl: `/dashboard?token=${school.dashboardToken}`,
        status: school.status
      })),
      privacyFeatures: [
        "Student names use 'First Name + Last Initial' format (Sarah J.)",
        "No parent contact information collected (privacy protection)",
        "Only parent consent field maintained for legal compliance"
      ],
      securityFeatures: [
        "Dashboard tokens auto-generated for secure access",
        "Token-based URLs replace email-based access",
        "Each school gets unique dashboard token"
      ],
      testScenarios: [
        "Two schools READY for matching (Pacific + Northeast)",
        "Three schools COLLECTING information (Southwest, Midwest, Southeast)",
        "Various student counts: 20, 23, 23, 30, 20",
        "Different completion rates for dashboard testing",
        "Multiple regions for FilterBar testing",
        "Variety of pen pal preferences and interests",
        "Mixed start months and special considerations",
        "Dashboard tokens for secure teacher access testing"
      ]
    });

  } catch (error) {
    console.error('Enhanced seed data creation error:', error);
    return NextResponse.json(
      { error: 'Failed to create enhanced test data', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}
