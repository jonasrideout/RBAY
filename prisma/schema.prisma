// /prisma/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolStatus {
  COLLECTING
  READY
  MATCHED
  CORRESPONDING
  DONE
}

enum PenpalPreference {
  ONE
  MULTIPLE
}

model School {
  id                    String        @id @default(cuid())
  // Teacher information
  teacherFirstName      String
  teacherLastName       String
  teacherEmail          String        @unique
  teacherPhone          String?
  
  // School details
  schoolName            String
  schoolAddress         String
  schoolCity            String
  schoolState           String
  schoolZip             String
  region                String        // Calculated from state
  
  // Program details
  gradeLevel            String[]      // Array to support multiple grades
  expectedClassSize     Int
  startMonth            String
  letterFrequency       String
  specialConsiderations String?       // NEW: Optional field for special notes
  
  // Status and tracking
  status                SchoolStatus  @default(COLLECTING)
  readyForMatching      Boolean       @default(false) // Keep for backward compatibility
  programAgreement      Boolean       @default(false)
  parentNotification    Boolean       @default(false)
  
  // Relationships
  students              Student[]
  
  // Matching relationships
  matchedWithSchool     School?       @relation("SchoolMatches", fields: [matchedWithSchoolId], references: [id])
  matchedWithSchoolId   String?
  matchedSchools        School[]      @relation("SchoolMatches")
  
  // Letter tracking
  lettersSent           Int           @default(0)
  lettersReceived       Int           @default(0)
  
  // Timestamps
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@map("schools")
}

model Student {
  id                    String            @id @default(cuid())
  firstName             String
  lastName              String
  grade                 String
  interests             String[]          @default([])
  
  // NEW: Pen pal preference
  penpalPreference      PenpalPreference  @default(ONE)
  
  // Parent information
  parentFirstName       String
  parentLastName        String
  parentEmail           String
  parentPhone           String?
  parentConsent         Boolean           @default(false)
  
  // Status tracking
  isActive              Boolean           @default(true)
  profileCompleted      Boolean           @default(false) // New field to track completion
  
  // School relationship
  school                School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId              String
  
  // Penpal relationships
  sentPenpals           StudentPenpal[]   @relation("SentPenpals")
  receivedPenpals       StudentPenpal[]   @relation("ReceivedPenpals")
  
  // Letters
  sentLetters           Letter[]          @relation("SentLetters")
  receivedLetters       Letter[]          @relation("ReceivedLetters")
  
  // Timestamps
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  @@map("students")
}

model StudentPenpal {
  id                    String          @id @default(cuid())
  
  // Student relationships
  student1              Student         @relation("SentPenpals", fields: [student1Id], references: [id])
  student1Id            String
  student2              Student         @relation("ReceivedPenpals", fields: [student2Id], references: [id])
  student2Id            String
  
  // Status
  status                String          @default("active") // active, inactive, completed
  
  // Timestamps
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  
  @@unique([student1Id, student2Id])
  @@map("student_penpals")
}

model Letter {
  id                    String          @id @default(cuid())
  
  // Author and recipient
  author                Student         @relation("SentLetters", fields: [authorId], references: [id])
  authorId              String
  recipient             Student         @relation("ReceivedLetters", fields: [recipientId], references: [id])
  recipientId           String
  
  // Content
  subject               String?
  content               String
  
  // Status
  status                String          @default("sent") // sent, delivered, read
  
  // Timestamps
  sentAt                DateTime        @default(now())
  deliveredAt           DateTime?
  readAt                DateTime?
  
  @@map("letters")
}
