// /prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                    String   @id @default(cuid())
  teacherFirstName      String
  teacherLastName       String
  teacherEmail          String   @unique
  teacherPhone          String?
  schoolName            String
  schoolAddress         String?
  schoolCity            String?
  schoolState           String
  schoolZip             String?
  region                String
  gradeLevel            String
  expectedClassSize     Int
  startMonth            String
  letterFrequency       String
  specialConsiderations String?
  status                SchoolStatus @default(COLLECTING)
  programAgreement      Boolean
  parentNotification    Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  students              Student[]
  schoolPairings1       SchoolPairing[] @relation("School1Pairings")
  schoolPairings2       SchoolPairing[] @relation("School2Pairings")
  
  @@map("schools")
}

model Student {
  id               String           @id @default(cuid())
  firstName        String
  lastName         String
  grade            String
  teacherEmail     String
  interests        String[]
  otherInterests   String?
  profileCompleted Boolean          @default(false)
  parentConsent    Boolean          @default(false)
  isActive         Boolean          @default(true)
  penpalPreference PenpalPreference @default(ONE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  school           School           @relation(fields: [teacherEmail], references: [teacherEmail])
  penpalPairings   StudentPenpal[]
  
  @@map("students")
}

model SchoolPairing {
  id          String   @id @default(cuid())
  school1Id   String
  school2Id   String
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  
  school1     School   @relation("School1Pairings", fields: [school1Id], references: [id])
  school2     School   @relation("School2Pairings", fields: [school2Id], references: [id])
  
  @@unique([school1Id, school2Id])
  @@map("school_pairings")
}

model StudentPenpal {
  id        String   @id @default(cuid())
  studentId String
  penpalId  String
  createdAt DateTime @default(now())
  
  student   Student  @relation(fields: [studentId], references: [id])
  
  @@unique([studentId, penpalId])
  @@map("student_penpals")
}

enum SchoolStatus {
  COLLECTING
  READY
  MATCHED
  CORRESPONDING
  DONE
}

enum PenpalPreference {
  ONE
  MULTIPLE
}
