generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolStatus {
  COLLECTING
  READY
  MATCHED
  CORRESPONDING
  DONE
}

enum PenpalPreference {
  ONE
  MULTIPLE
}

model School {
  id                   String        @id @default(cuid())
  schoolName           String
  teacherName          String
  teacherEmail         String        @unique
  teacherPhone         String?
  schoolAddress        String?
  schoolCity           String?
  schoolState          String
  schoolZip            String?
  gradeLevel           String
  expectedClassSize    Int
  startMonth           String
  specialConsiderations String?
  status               SchoolStatus  @default(COLLECTING)
  region               String
  isActive             Boolean       @default(true)
  
  // One-to-one school pairing
  matchedWithSchoolId  String?       @unique
  matchedWithSchool    School?       @relation("SchoolPairing", fields: [matchedWithSchoolId], references: [id])
  pairedSchool         School?       @relation("SchoolPairing")
  
  // Future letter tracking fields (optional for now)
  letterFrequency      String?
  lettersSent          Int?          @default(0)
  lettersReceived      Int?          @default(0)
  
  students             Student[]
  schoolPairings       SchoolPairing[] @relation("School1Pairings")
  pairedWithSchools    SchoolPairing[] @relation("School2Pairings")
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  @@map("schools")
}

model Student {
  id                String           @id @default(cuid())
  firstName         String
  lastInitial       String           // Changed from lastName for privacy
  grade             String
  interests         String[]
  otherInterests    String?
  // Removed parentName, parentEmail, parentPhone for privacy
  parentConsent     Boolean          @default(false)  // Keep for legal compliance
  penpalPreference  PenpalPreference @default(ONE)
  isActive          Boolean          @default(true)
  profileCompleted  Boolean          @default(false)
  schoolId          String
  school            School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  penpalConnections StudentPenpal[]  @relation("StudentConnections")
  penpalOf          StudentPenpal[]  @relation("PenpalOf")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  @@map("students")
}

model SchoolPairing {
  id        String   @id @default(cuid())
  school1Id String
  school2Id String
  school1   School   @relation("School1Pairings", fields: [school1Id], references: [id], onDelete: Cascade)
  school2   School   @relation("School2Pairings", fields: [school2Id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([school1Id, school2Id])
  @@map("school_pairings")
}

model StudentPenpal {
  id        String   @id @default(cuid())
  studentId String
  penpalId  String
  student   Student  @relation("StudentConnections", fields: [studentId], references: [id], onDelete: Cascade)
  penpal    Student  @relation("PenpalOf", fields: [penpalId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([studentId, penpalId])
  @@map("student_penpals")
}
